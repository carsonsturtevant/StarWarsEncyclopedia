@page "/people"

@using StarWarsBlazor.Data
@using StarWarsBlazor.Data.RootObjects
@using System.Net.Http
@using Newtonsoft.Json
@inject HttpClient Http
@inject StarWarsBlazor.Services.PeopleService PeopleService

    <div class="container">
        <h3>People</h3>
        @if (people.Count == 0)
        {
            <div class="w-100 my-3">
                <div class="loader mx-auto"></div>
            </div>
        }
        else
        {
            <div class="p-2">
                <input class="form-control" id="filter" type="text" @bind-value="filter" @bind-value:event="oninput" placeholder="Search...">
            </div>
            <div class="card-columns">
                @foreach (var p in people)
                {
                    if (filter == "" || p.name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                    {
                        <a type="button" class="card border-primary text-white bg-dark" style="max-width: 18rem;" data-toggle="modal" data-target="#personModal" @onclick="@(() => SetCurrentPerson(p.url))">
                            <img class="card-img-top" style="max-height: 20rem;" src="@p.img_url" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">@p.name</h5>
                                <p class="card-text"></p>
                            </div>
                        </a>
                    }
                }
                    </div>
            <button @onclick="ToggleContent">Toggle raw json</button>
            <p>@peopleJson</p>

            @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                Launch demo modal
            </button>*@

            <div class="modal fade" id="personModal" tabindex="-1" role="dialog" aria-labelledby="personModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">@currentPerson.name</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            ...
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

@code {
    public List<Person> people = new List<Person>();
    public Person currentPerson = new Person();
    // public List<Species> species = new List<Species>();
    public string filter = "";
    private string peopleJson = "";


    protected override async Task OnInitializedAsync()
    {
        people = await PeopleService.GetPeople();
        // await getSpecies();
        // setAllSpecies();
        await setAllImages();
    }

    private async Task setAllImages()
    {
        var url = "https://localhost:44334/api/peopleimage";
        var response = await Http.GetAsync(url);
        var stream = await response.Content.ReadAsStringAsync();
        var rootObject = JsonConvert.DeserializeObject<List<RootImageObject>>(stream);

        foreach (var person in people)
        {
            person.img_url = rootObject.Find(x => x.SwapiUrl == person.url)?.ImageUrl;
        }
    }

    private void SetCurrentPerson(string url)
    {
        currentPerson = PeopleService.GetPerson(url);
    }

    //private async Task getSpecies()
    //{
    //    var next = "https://swapi.co/api/species/";
    //    while (next != null)
    //    {
    //        var response = await Http.GetAsync(next);
    //        var stream = await response.Content.ReadAsStringAsync();
    //        var rootObject = JsonConvert.DeserializeObject<RootSwapiObject<Species>>(stream);
    //        species.AddRange(rootObject.results);
    //        next = rootObject.next;
    //    }
    //}

    //private void setAllSpecies()
    //{
    //    foreach (var person in people)
    //    {
    //        if (person.species.Count > 0)
    //        {
    //            person.species[0] = species.Where(x => x.url == person.species[0]).First().name;
    //        }
    //        else
    //        {
    //            person.species.Add("Unknown");
    //        }
    //    }
    //}

    private void ToggleContent()
    {
        if (peopleJson == "")
        {
            peopleJson = PeopleService.GetPeopleJson();
        }
        else
        {
            peopleJson = "";
        }
    }
}
