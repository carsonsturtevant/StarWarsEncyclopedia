@page "/people"

@using StarWarsBlazor.Data
@using StarWarsBlazor.Data.RootObjects
@using System.Net.Http
@using Newtonsoft.Json
@inject HttpClient Http
@inject StarWarsBlazor.Services.PeopleService PeopleService
@inject StarWarsBlazor.Services.SpeciesService SpeciesService
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

    <div class="container">
        @if (people.Count == 0)
        {
            <div class="w-100 my-3">
                <div class="loader mx-auto"></div>
            </div>
        }
        else
        {
            <div class="p-3">
                <input class="form-control bg-dark" id="filter" type="text" @bind-value="filter" @bind-value:event="oninput" placeholder="Search...">
            </div>

            <div class="row">
                @foreach (var p in people)
                {
                    if (filter == "" || p.name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                    {
                        <a class="card my-card m-1 bg-dark-opacity" data-toggle="modal" data-target="#personModal" @onclick="@(() => SetCurrentPerson(p.url))">
                            <div class="row no-gutters">
                                <div class="col-4">
                                    <img src="@p.img_url" class="card-img my-card-img">
                                </div>
                                <div class="col-8">
                                    <div class="card-body">
                                        <h5 class="card-title">@p.name</h5>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                }
            </div>

            @*<button @onclick="ToggleContent">Toggle raw json</button>
            <p>@peopleJson</p>*@

            <div class="modal fade" id="personModal" tabindex="-1" role="dialog" aria-labelledby="personModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content bg-dark">
                        <div class="modal-header">
                            <img src="@currentPerson.img_url" style="height:50px" />
                            <h5 class="modal-title ml-2" id="exampleModalLabel">@currentPerson.name</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true" style="color: white">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Species: @currentPerson.species?.FirstOrDefault()  <br />
                            Birth year: @currentPerson.birth_year <br />
                            Gender: @currentPerson.gender <br />
                            Height: @currentPerson.height <br />
                            Hair color: @currentPerson.hair_color <br />
                            Skin color: @currentPerson.skin_color <br />

                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

@code {
    public List<Person> people = new List<Person>();
    public List<Species> species = new List<Species>();
    public Person currentPerson = new Person();
    public string filter = "";
    private string peopleJson = "";


    protected override async Task OnInitializedAsync()
    {
        people = await PeopleService.GetPeople();
        species = await SpeciesService.GetSpecies();
        await setAllImages();
    }

    private async Task setAllImages()
    {
        var url = Configuration["SwiapiUrl"] + "/api/peopleimage";
        var response = await Http.GetAsync(url);
        var stream = await response.Content.ReadAsStringAsync();
        var rootObject = JsonConvert.DeserializeObject<List<RootImageObject>>(stream);

        foreach (var person in people)
        {
            person.img_url = rootObject.Find(x => x.SwapiUrl == person.url)?.ImageUrl;
        }
    }

    private void SetCurrentPerson(string url)
    {
        currentPerson = PeopleService.GetPerson(url);
        currentPerson.species = new List<string>() { SpeciesService.GetSpecies(currentPerson.species.FirstOrDefault())?.name };
    }

    private void ToggleContent()
    {
        if (peopleJson == "")
        {
            peopleJson = PeopleService.GetPeopleJson();
        }
        else
        {
            peopleJson = "";
        }
    }
}
